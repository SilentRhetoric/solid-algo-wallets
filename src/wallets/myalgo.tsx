/*
 * Documentation:
 * https://connect.myalgo.com/docs/introduction
 */
import { createRoot, createSignal } from 'solid-js'
import MyAlgoConnect, { Accounts } from '@randlabs/myalgo-connect'
import { WalletAccount, WalletInterface } from '../types'
import { Transaction } from 'algosdk'

function useMyAlgo(): WalletInterface {
  const [walletClient, setWalletClient] = createSignal<MyAlgoConnect>()
  const [accounts, setAccounts] = createSignal<WalletAccount[]>([])

  const name = 'MyAlgo'

  function icon() {
    return (
      <svg
        version="1.1"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 32 32"
        height="32"
      >
        <path
          fill="#245EC6"
          d="M16,32c-3.2,0-6.2-0.9-8.9-2.7c-2.6-1.8-4.7-4.3-5.9-7.2C0,19.2-0.3,16,0.3,12.9C0.9,9.8,2.4,7,4.7,4.7 C6.2,3.2,7.9,2,9.9,1.2C11.8,0.4,13.9,0,16,0s4.2,0.4,6.1,1.2c1.9,0.8,3.7,2,5.2,3.5s2.7,3.3,3.5,5.2c0.8,1.9,1.2,4,1.2,6.1 s-0.4,4.2-1.2,6.1c-0.8,1.9-2,3.7-3.5,5.2c-1.5,1.5-3.2,2.7-5.2,3.5C20.2,31.6,18.1,32,16,32L16,32z M20.2,11.2l0.1,0.5l2.6,9.5h2.1 L21.5,8.9l-0.1-0.3h-1.9l0,0.1l-1.7,3.1L16,14.9l0,0.1l0-0.1l-0.2-0.8l-0.6-2.4l-0.1-0.2l-0.7-2.6l-0.1-0.3h-1.9l0,0.1l-1.7,3.1 l-1.8,3.2L7.1,18l-1.8,3.2h2.1L9.2,18l1.8-3.2l1.8-3.2l0.3-0.5l0.1,0.5l0.5,2.1l0.7,2.6l0.2,0.9L14.2,18l-1.8,3.2h2.1l0.8-1.3 l1.3-2.3l1.5-2.7l1.8-3.2L20.2,11.2L20.2,11.2z"
        />
      </svg>
    )
  }

  function image() {
    return (
      <svg
        height="32"
        viewBox="0 0 100 32"
        fill="black"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M15.9766 31.9999C12.8169 32.0002 9.72809 31.0635 7.10077 29.3082C4.47345 27.553 2.42565 25.058 1.21634 22.1389C0.00703522 19.2197 -0.309462 16.0076 0.306877 12.9085C0.923216 9.80953 2.44471 6.96289 4.67894 4.72862C6.16001 3.23452 7.92161 2.04767 9.8626 1.2362C11.8036 0.424739 13.8857 0.00464508 15.9895 3.83043e-05C18.0933 -0.00456847 20.1773 0.406403 22.1218 1.20936C24.0663 2.01231 25.8331 3.19144 27.3207 4.67904C28.8083 6.16664 29.9874 7.93342 30.7904 9.87794C31.5933 11.8225 32.0043 13.9064 31.9997 16.0102C31.9951 18.114 31.575 20.1962 30.7635 22.1371C29.9521 24.0781 28.7652 25.8397 27.2711 27.3208C25.7914 28.8087 24.0312 29.9884 22.0925 30.7916C20.1538 31.5948 18.0751 32.0055 15.9766 31.9999V31.9999ZM20.226 11.2241L20.3554 11.7226L22.9746 21.2167H25.1057L21.5304 8.90455L21.4434 8.56986H19.5846L19.5415 8.63696L17.8026 11.725L16.0198 14.8921L15.9766 14.9679L15.9567 14.8921L15.737 14.0781L15.1283 11.725L15.0628 11.4909L14.3887 8.90375L14.3016 8.56907H12.4461L12.403 8.63616L10.6649 11.725L8.88202 14.8921L7.11037 18.048L5.32753 21.2167H7.45703L9.23987 18.0496L11.0227 14.8945L12.7944 11.7274L13.0875 11.2257L13.2177 11.7274L13.7609 13.8129L14.4358 16.4105L14.6706 17.2963L14.2473 18.0496L12.4621 21.2167H14.5916L15.344 19.8803L16.6516 17.5599L18.1572 14.8945L19.9289 11.7274L20.2212 11.2281L20.226 11.2241Z"
          fill="#245EC6"
        />
        <path
          d="M41.2712 22.1595L43.7857 8.53246C43.807 8.44985 43.8537 8.37602 43.9193 8.32142C43.9848 8.26682 44.0659 8.23421 44.151 8.22821H44.4764C44.5484 8.23192 44.6181 8.25446 44.6786 8.29357C44.7392 8.33269 44.7884 8.38701 44.8213 8.45111L49.0597 18.8135H49.141L53.3574 8.45111C53.3882 8.38529 53.4368 8.32947 53.4978 8.29004C53.5588 8.25062 53.6297 8.22919 53.7023 8.22821H54.0277C54.1128 8.23421 54.1939 8.26682 54.2595 8.32142C54.325 8.37602 54.3717 8.44985 54.393 8.53246L56.8872 22.1603C56.9084 22.216 56.9149 22.2762 56.9059 22.3351C56.897 22.394 56.873 22.4496 56.8362 22.4965C56.7995 22.5434 56.7512 22.58 56.6962 22.6028C56.6411 22.6255 56.5811 22.6337 56.522 22.6264H55.2016C55.1161 22.6238 55.0335 22.5953 54.9646 22.5446C54.8957 22.4939 54.8439 22.4234 54.816 22.3425L53.3176 13.2776H53.2565L49.6064 22.6061C49.5803 22.6753 49.5328 22.7343 49.4707 22.7745C49.4086 22.8146 49.3352 22.8337 49.2614 22.829H48.8962C48.8229 22.8308 48.7508 22.8105 48.6893 22.7707C48.6278 22.731 48.5797 22.6736 48.5512 22.6061L44.8807 13.2776H44.7994L43.3399 22.3425C43.3167 22.4223 43.2689 22.4926 43.2033 22.5436C43.1377 22.5946 43.0577 22.6236 42.9747 22.6264H41.6568C41.5972 22.6326 41.537 22.624 41.4815 22.6013C41.426 22.5786 41.377 22.5425 41.3389 22.4963C41.3007 22.4501 41.2745 22.3951 41.2627 22.3364C41.2509 22.2776 41.2538 22.2168 41.2712 22.1595ZM60.7457 22.3417L57.2175 15.0413C57.1867 14.9845 57.1719 14.9205 57.1746 14.856C57.1773 14.7915 57.1974 14.7289 57.2327 14.6748C57.2681 14.6208 57.3174 14.5773 57.3754 14.5491C57.4335 14.5208 57.4981 14.5087 57.5624 14.5142H58.9006C58.9719 14.5205 59.0405 14.5442 59.1006 14.583C59.1607 14.6218 59.2105 14.6747 59.2456 14.7371L61.7601 20.1314H61.7804L64.2136 14.7371C64.2517 14.6596 64.3135 14.5962 64.39 14.5561C64.4664 14.516 64.5537 14.5013 64.6391 14.5142H65.7951C65.8606 14.5046 65.9274 14.514 65.9878 14.5413C66.0481 14.5685 66.0994 14.6123 66.1357 14.6677C66.1719 14.7231 66.1916 14.7877 66.1923 14.8539C66.1931 14.9201 66.175 14.9851 66.14 15.0413L59.9346 28.4641C59.905 28.5325 59.8571 28.5914 59.7963 28.6345C59.7355 28.6775 59.664 28.703 59.5897 28.7082H58.3743C58.3076 28.7144 58.2404 28.702 58.1803 28.6723C58.1202 28.6427 58.0695 28.597 58.0338 28.5403C57.9981 28.4836 57.9787 28.4181 57.978 28.3511C57.9772 28.2841 57.995 28.2182 58.0294 28.1607L60.7457 22.3417ZM65.4933 22.6256C65.429 22.6311 65.3643 22.619 65.3063 22.5907C65.2483 22.5624 65.1989 22.519 65.1636 22.4649C65.1282 22.4109 65.1082 22.3483 65.1055 22.2838C65.1028 22.2193 65.1176 22.1552 65.1484 22.0985L71.3749 8.45111C71.4121 8.39048 71.4623 8.33897 71.522 8.30039C71.5817 8.26181 71.6493 8.23714 71.7199 8.22821H71.9224C71.993 8.23714 72.0606 8.26181 72.1203 8.30039C72.18 8.33897 72.2302 8.39048 72.2674 8.45111L78.45 22.0993C78.4807 22.1561 78.4956 22.2201 78.4929 22.2846C78.4902 22.3491 78.4701 22.4117 78.4348 22.4657C78.3994 22.5198 78.3501 22.5632 78.2921 22.5915C78.234 22.6198 78.1694 22.6319 78.1051 22.6264H76.8279C76.728 22.6316 76.629 22.6049 76.5453 22.5502C76.4615 22.4955 76.3972 22.4157 76.3617 22.3222L75.1057 19.5441H68.4748C68.068 20.4771 67.6434 21.3891 67.2375 22.3222C67.1976 22.4126 67.1323 22.4895 67.0495 22.5435C66.9668 22.5975 66.8701 22.6263 66.7713 22.6264L65.4933 22.6256ZM69.2655 17.7991H74.3369L71.8411 12.2469H71.7394L69.2655 17.7991ZM79.2716 22.24V8.81637C79.2749 8.71514 79.3166 8.61894 79.3882 8.54732C79.4598 8.4757 79.556 8.43403 79.6572 8.43077H80.8132C80.9145 8.43403 81.0107 8.4757 81.0823 8.54732C81.1539 8.61894 81.1956 8.71514 81.1988 8.81637V22.2392C81.1956 22.3404 81.1539 22.4366 81.0823 22.5083C81.0107 22.5799 80.9145 22.6215 80.8132 22.6248H79.6556C79.5546 22.6216 79.4587 22.5801 79.3871 22.5088C79.3155 22.4376 79.2737 22.3418 79.27 22.2408L79.2716 22.24ZM82.5435 22.1383C82.5665 21.6621 82.7108 21.1997 82.9628 20.7951C83.2149 20.3904 83.5662 20.0569 83.9834 19.8263C83.5658 19.2563 83.3451 18.5659 83.3546 17.8593C83.3447 17.3957 83.4277 16.9347 83.5988 16.5037C83.7698 16.0727 84.0254 15.6802 84.3505 15.3495C84.6756 15.0188 85.0636 14.7565 85.4917 14.5781C85.9198 14.3997 86.3792 14.3088 86.8429 14.3108H90.3914C90.4425 14.309 90.4935 14.3177 90.5411 14.3364C90.5887 14.3552 90.632 14.3835 90.6681 14.4197C90.7043 14.4559 90.7326 14.4991 90.7514 14.5467C90.7701 14.5943 90.7788 14.6453 90.777 14.6964V15.2032C90.777 15.3447 90.6957 15.5286 90.5541 15.5481L89.4388 15.8524C89.7364 16.1265 89.9689 16.4636 90.1194 16.8391C90.2698 17.2147 90.3344 17.6191 90.3084 18.0228C90.3076 18.4687 90.2168 18.9099 90.0414 19.3199C89.866 19.7299 89.6097 20.1003 89.2878 20.4089C88.9659 20.7175 88.5851 20.958 88.168 21.1159C87.751 21.2739 87.3064 21.346 86.8608 21.3281C86.2596 21.3092 85.6647 21.1995 85.0963 21.0027C84.8716 21.0611 84.6707 21.1882 84.5216 21.3663C84.3726 21.5443 84.2829 21.7645 84.2649 21.996C84.2686 22.1167 84.2975 22.2354 84.3498 22.3443C84.4021 22.4532 84.4766 22.5499 84.5686 22.6282C84.6606 22.7065 84.7679 22.7647 84.8838 22.799C84.9996 22.8333 85.1213 22.843 85.2411 22.8274H87.9989C89.7634 22.8274 91.183 23.7808 91.183 25.5445C91.183 27.3293 89.5608 28.9107 86.8633 28.9107C84.0038 28.9107 82.8478 27.4505 82.8478 26.1326C82.8608 25.7375 82.9784 25.3528 83.1887 25.018C83.3989 24.6831 83.6942 24.41 84.0445 24.2266V24.1656C83.6079 24.0372 83.225 23.77 82.9539 23.4045C82.6827 23.039 82.5381 22.595 82.5419 22.14L82.5435 22.1383ZM86.8836 19.7653C87.1214 19.7657 87.3566 19.7163 87.5742 19.6205C87.7919 19.5247 87.9871 19.3846 88.1474 19.209C88.3078 19.0334 88.4297 18.8263 88.5054 18.6009C88.5811 18.3755 88.6089 18.1367 88.5871 17.9C88.6089 17.6632 88.5811 17.4245 88.5054 17.1991C88.4297 16.9736 88.3078 16.7665 88.1474 16.5909C87.9871 16.4154 87.7919 16.2752 87.5742 16.1794C87.3566 16.0836 87.1214 16.0343 86.8836 16.0346C86.6412 16.0306 86.4006 16.0767 86.1769 16.1701C85.9531 16.2634 85.7511 16.4021 85.5835 16.5772C85.4159 16.7524 85.2863 16.9603 85.2029 17.1879C85.1195 17.4156 85.084 17.658 85.0988 17.9C85.0838 18.1419 85.1191 18.3844 85.2023 18.6121C85.2855 18.8398 85.4149 19.0479 85.5823 19.2232C85.7498 19.3985 85.9517 19.5373 86.1753 19.6309C86.399 19.7245 86.6396 19.7708 86.882 19.767L86.8836 19.7653ZM84.7343 25.8089C84.7343 26.6403 85.6064 27.2488 86.8429 27.2488C88.0794 27.2488 89.1549 26.6199 89.1549 25.647C89.1549 25.3216 88.9523 24.491 87.6336 24.491C87.0455 24.491 86.437 24.491 85.8488 24.5317C85.726 24.5731 84.7319 24.8977 84.7319 25.8105L84.7343 25.8089ZM91.5954 18.5491C91.6305 17.7466 91.9005 16.9721 92.372 16.3217C92.8435 15.6713 93.4956 15.1737 94.2474 14.8908C94.9993 14.6079 95.8176 14.552 96.6009 14.7302C97.3842 14.9083 98.0979 15.3127 98.6534 15.893C99.2089 16.4733 99.5816 17.2039 99.7254 17.9943C99.8692 18.7846 99.7776 19.5998 99.4621 20.3385C99.1466 21.0772 98.621 21.707 97.9507 22.1496C97.2803 22.5923 96.4947 22.8282 95.6914 22.8282C94.5811 22.8028 93.5262 22.3382 92.7579 21.5362C91.9896 20.7342 91.5707 19.6603 91.593 18.55L91.5954 18.5491ZM93.4006 18.5491C93.3686 18.8693 93.4041 19.1926 93.5047 19.4982C93.6053 19.8037 93.7689 20.0849 93.9848 20.3234C94.2007 20.5619 94.4642 20.7526 94.7582 20.883C95.0523 21.0135 95.3705 21.0809 95.6922 21.0809C96.0139 21.0809 96.3321 21.0135 96.6262 20.883C96.9203 20.7526 97.1838 20.5619 97.3997 20.3234C97.6156 20.0849 97.7791 19.8037 97.8797 19.4982C97.9803 19.1926 98.0158 18.8693 97.9839 18.5491C98.0076 18.2337 97.9661 17.9167 97.8617 17.6181C97.7573 17.3194 97.5924 17.0455 97.3773 16.8136C97.1621 16.5816 96.9014 16.3966 96.6115 16.27C96.3215 16.1435 96.0086 16.0782 95.6922 16.0782C95.3759 16.0782 95.0629 16.1435 94.773 16.27C94.483 16.3966 94.2223 16.5816 94.0072 16.8136C93.7921 17.0455 93.6271 17.3194 93.5228 17.6181C93.4184 17.9167 93.3768 18.2337 93.4006 18.5491Z"
          fill="#245EC6"
        />
      </svg>
    )
  }

  async function getClient(): Promise<MyAlgoConnect> {
    const client = walletClient()
    if (client) {
      return client
    } else {
      const MyAlgoConnect = (await import('@randlabs/myalgo-connect')).default
      const client = new MyAlgoConnect({ disableLedgerNano: false })
      setWalletClient(client)
      return client
    }
  }

  async function connect(): Promise<WalletAccount[]> {
    console.debug('MyAlgo: connect')
    const client = await getClient()
    const walletAccounts: Accounts[] = await client.connect({
      shouldSelectOneAccount: false,
      openManager: false,
    })
    if (walletAccounts.length === 0) {
      throw new Error(`No accounts found`)
    }
    setAccounts(walletAccounts)
    console.debug(walletAccounts)
    return walletAccounts
  }

  async function reconnect() {
    console.debug('MyAlgo: reconnect')
    return await connect()
  }

  function disconnect() {
    setWalletClient(undefined)
    setAccounts([])
  }

  async function transactionSigner(
    txnGroup: Transaction[],
    indexesToSign: number[],
  ): Promise<Uint8Array[]> {
    console.debug('txnGroup: ', txnGroup)
    console.debug('indexesToSign: ', indexesToSign)
    const client = walletClient()
    if (client) {
      // Get the transactions to sign
      const txnsToSign = txnGroup.reduce<Uint8Array[]>((acc, txn, idx) => {
        if (indexesToSign.includes(idx)) {
          console.debug(`txn: ${idx}`, txn)
          acc.push(txn.toByte())
        }
        return acc
      }, [])
      console.debug('txnsToSign: ', txnsToSign)

      // Sign them with the client
      const result = await client.signTransaction(txnsToSign)

      // Join the newly signed transactions with the original group of transactions
      const signedTxns = txnGroup.reduce<Uint8Array[]>((acc, txn, idx) => {
        if (indexesToSign.find(item => item === idx) !== undefined) {
          const nextSignedTxn = result.shift()?.blob
          if (nextSignedTxn) {
            acc.push(nextSignedTxn)
          } else {
            throw new Error('Error reconstructing signedTxns array')
          }
        } else {
          acc.push(txn.toByte())
        }
        return acc
      }, [])
      return signedTxns
    } else {
      throw new Error('Wallet client is not initialized')
    }
  }

  return {
    name,
    icon,
    image,
    accounts,
    connect,
    disconnect,
    reconnect,
    transactionSigner,
  }
}

export default createRoot(useMyAlgo)
